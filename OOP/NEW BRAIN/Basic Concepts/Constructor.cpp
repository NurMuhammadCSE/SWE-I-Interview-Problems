/*
Constructor ‡¶π‡¶≤‡ßã ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®, ‡¶Ø‡¶æ ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡¶á ‡¶∏‡ßç‡¶¨‡ßü‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶≠‡¶æ‡¶¨‡ßá (Automatically) ‡¶ï‡¶≤ ‡¶π‡ßü‡•§
‡¶è‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶π‡¶≤‡ßã ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶Æ‡¶æ‡¶® (initialization) ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ‡•§

‚úÖ ‡¶ï‡¶®‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡ßç‡¶ü‡¶∞‡ßá‡¶∞ ‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø:
‡¶¨‡¶ø‡¶∑‡ßü	‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ
üîÑ ‡¶ï‡¶≤ ‡¶π‡ßü ‡¶∏‡ßç‡¶¨‡ßü‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶≠‡¶æ‡¶¨‡ßá	‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶≤‡ßá‡¶á
‚öôÔ∏è ‡¶®‡¶æ‡¶Æ ‡¶π‡ßü ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã	‡¶ï‡ßã‡¶® Return type ‡¶•‡¶æ‡¶ï‡ßá ‡¶®‡¶æ
üîÅ Overload ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü	‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶ï‡¶®‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡ßç‡¶ü‡¶∞ ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶Ø‡¶æ‡ßü
üõ†Ô∏è ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶¨‡¶æ ‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞‡¶∏‡¶π ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá constructor overloading
*/

/*
1. Constructor are special methods whose name is the same as the class.
2. Constructor is automatically called when an object is created.
3. Constructor does not have a return type, not even void.
4. Memory allocation happens when an object is created.

Types of Constructors:
1. Default Constructor: No parameters, initializes members to default values.
2. Parameterized Constructor: Takes parameters to initialize members with specific values.
3. Copy Constructor: Initializes an object using another object of the same class.
*/

#include <bits/stdc++.h>
using namespace std;

class Student {
public:
    string name;
    int age;

    // Constructor
    Student(string n, int a) {
        name = n;
        age = a;
    }

    void display() {
        cout << "Name: " << name << ", Age: " << age << endl;
    }
};

// ‚úÖ Default Constructor ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
class Car {
public:
    string brand;

    Car() {
        brand = "Default Brand";
    }
};

// ‚úÖ Parameterized Constructor ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
class Bike {
public:
    string model;
    int year;

    Bike(string m, int y) {
        model = m;
        year = y;
    }

    void show() {
        cout << "Model: " << model << ", Year: " << year << endl;
    }
};

// ‚úÖ Copy Constructor ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
class Person {
public:
    string name;
    int age;

    // Parameterized Constructor
    Person(string n, int a) {
        name = n;
        age = a;
    }

    // Copy Constructor
    Person(const Person &p) {
        name = p.name;
        age = p.age;
        cout << "Name: " << name << ", Age: " << age << endl;
    }

    void info() {
        cout << "Name: " << name << ", Age: " << age << endl;
    }
};

class StudentTwo {
public:
    string name;
    int age;

    // Parameterized Constructor
    StudentTwo(string n, int a) {
        name = n;
        age = a;
    }

    // ‚úÖ Copy Constructor
    StudentTwo(const StudentTwo &s) {
        name = s.name;
        age = s.age;
        cout << "Copy constructor called!" << endl;
    }

    void display() {
        cout << "Name: " << name << ", Age: " << age << endl;
    }
};


int main() {
    Student s1("Nur", 22);     // constructor auto call ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    Student s2("Muhammad", 30);
    s1.display();  // Output: Name: Nur, Age: 22
    s2.display();  // Output: Name: Muhammad, Age: 20

    Car car1;  // Default constructor call
    cout << "Car brand: " << car1.brand << endl;  // Output: Default Brand

    Bike bike1("Yamaha", 2022);  // Parameterized constructor call
    bike1.show();  // Output: Model: Yamaha, Year: 2022

    Person p1("Alice", 25);
    Person p2 = p1;  // Copy constructor call
    p2.info();  // Output: Name: Alice, Age: 25

    StudentTwo student1("John", 20);
    StudentTwo student2 = student1;  // Copy constructor call
    student1.display();  // Output: Name: John, Age: 20
    student2.display();  // Output: Name: John, Age: 20
}


/*
üéØ ‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶∏‡¶π‡¶ú ‡¶∏‡ßÇ‡¶§‡ßç‡¶∞:
"Constructor ‡¶Æ‡¶æ‡¶®‡ßá‡¶á ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶§‡ßá‡¶á ‡¶Ø‡ßá‡¶ü‡¶æ ‡¶∏‡ßç‡¶¨‡ßü‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶≠‡¶æ‡¶¨‡ßá ‡¶∞‡¶æ‡¶® ‡¶π‡ßü ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡ßü‡•§"

üîö ‡¶∞‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶™:
Constructor = Special function
Object ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶≤‡ßá‡¶á ‡¶ï‡¶≤ ‡¶π‡ßü
‡¶®‡¶æ‡¶Æ = ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ
Return ‡¶ü‡¶æ‡¶á‡¶™ = ‡¶®‡¶æ‡¶á
Overload ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü
*/