#include <iostream>
#include <stdexcept>
using namespace std;

class Bird {
public:
    virtual void fly() {
        cout << "Bird is flying" << endl;
    }
};

class Sparrow : public Bird {
public:
    void fly() override {
        cout << "Sparrow is flying" << endl;
    }
};

class Ostrich : public Bird {
public:
    void fly() override {
        // üõë LSP ‡¶≠‡¶ô‡ßç‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá: ‡¶â‡ßú‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá ‡¶®‡¶æ, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ fly() override ‡¶ï‡¶∞‡¶õ‡ßá
        throw logic_error("Ostrich can't fly!");
    }
};

void letBirdFly(Bird* bird) {
    bird->fly(); // üõë ‡¶è‡¶ñ‡¶æ‡¶®‡ßá runtime exception ‡¶Ü‡¶∏‡¶¨‡ßá Ostrich ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
}

int main() {
    Bird* bird1 = new Sparrow();
    letBirdFly(bird1); // ‚úÖ OK

    Bird* bird2 = new Ostrich();
    letBirdFly(bird2); // ‚ùå Runtime Error: Ostrich can't fly!

    return 0;
}
// Note: This code violates the Liskov Substitution Principle (LSP) because Ostrich cannot fly,
// but it overrides the fly() method, leading to unexpected behavior when used in place of Bird.
// To fix this, we could redesign the class hierarchy to avoid such violations, for example by