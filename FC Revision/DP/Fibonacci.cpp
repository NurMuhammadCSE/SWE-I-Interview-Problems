#include<bits/stdc++.h>
using namespace std;

/*
ЁЯФ╣ Problem Statement: Fibonacci Number
рждрзЛржорж╛ржХрзЗ ржПржХржЯрж┐ рж╕ржВржЦрзНржпрж╛ n ржжрзЗржУрзЯрж╛ рж╣ржмрзЗ, ржПржмржВ рждрзЛржорж╛ржХрзЗ nth Fibonacci Number ржмрзЗрж░ ржХрж░рждрзЗ рж╣ржмрзЗред

ЁЯФ╣ Fibonacci Sequence ржХрзЗржоржи?
Fibonacci рж╕рж┐рж░рж┐ржЬрзЗрж░ ржкрзНрж░ржержо ржжрзБржЯрж┐ рж╕ржВржЦрзНржпрж╛ 0 ржПржмржВ 1, ржПрж░ржкрж░ ржкрзНрж░рждрж┐ржЯрж┐ рж╕ржВржЦрзНржпрж╛ рждрж╛рж░ ржЖржЧрзЗрж░ ржжрзБржЯрж┐ рж╕ржВржЦрзНржпрж╛рж░ ржпрзЛржЧржлрж▓ред
рждрж╛рж╣рж▓рзЗ Fibonacci рж╕рж┐рж░рж┐ржЬ рж╣ржмрзЗ:
0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ...
F(n)=F(nтИТ1)+F(nтИТ2)
*/
// 1я╕ПтГг Recursive Approach (Without Memoization)
class Solution {
public:
    int fib(int n) {
        if (n <= 1) {
            return n;
        }
        return fib(n - 1) + fib(n - 2);
    }
};
/*
тЬЕ Time Complexity: O(2^n) (Exponential)
тЭМ Space Complexity: O(n) (Recursion Stack)
*/

// 2я╕ПтГг Dynamic Programming (Tabulation Approach)
class Solution {
public:
    int fib(int n) {
        if (n <= 1) {
            return n;
        }
        vector<int> dp(n + 1);
        dp[0] = 0;
        dp[1] = 1;

        for (int i = 2; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        return dp[n];
    }
};
/*
тЬЕ Time Complexity: O(n) (Linear)
тЬЕ Space Complexity: O(n) (DP Array)
*/    

class Solution {
public:
    int fib(int n) {
        if (n <= 1) return n;
        
        int prev2 = 0, prev1 = 1;
        for (int i = 2; i <= n; i++) {
            int curr = prev1 + prev2;
            prev2 = prev1;
            prev1 = curr;
        }
        return prev1;
    }
};
/*
тЬЕ Time Complexity: O(n)
тЬЕ Space Complexity: O(1) (ржПржХржЯрж┐ ржорж╛рждрзНрж░ ржнрзЗрж░рж┐рзЯрзЗржмрж▓ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ)
*/